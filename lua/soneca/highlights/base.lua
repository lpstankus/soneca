local M = {}

function M.get(c)
  return {
    Normal    = { fg = c.base, bg = c.bg0 },
    NormalNC  = { fg = c.base, bg = c.bg0 },
    Text      = { fg = c.base },
    Bold      = { fg = c.base, bold = true },
    Italic    = { fg = c.base, italic = true },
    Emph      = "Italic",
    Underline = { fg = c.base, underline = true },
    Strike    = { fg = c.base, strikethrough = true },
    Ignore    = { fg = c.gra0 },
    Comment   = { fg = c.gra0 },
    Conceal   = { fg = c.gra1 },
    Todo      = { fg = c.lig1, bold = true },

    Cursor       = { fg = c.bg0, bg = c.base },
    lCursor      = { fg = c.bg0, bg = c.base },
    CursorIM     = { fg = c.bg0, bg = c.base },
    CursorColumn = { bg = c.bg1 },
    CursorLine   = { bg = c.bg1 },
    ColorColumn  = { bg = c.bg3 },

    LineNr       = { fg = "#3E3B36", bg = c.bg3 },
    CursorLineNr = { fg = "#DED8D1", bg = c.bg1, bold = true },
    LineNrAbove  = "LineNr",
    baseelow     = "LineNr",

    SignColumn   = { fg = c.lig1, bg = c.bg1 },
    Folded       = { fg = "#3E3B36", bg = c.bg3 },
    FoldColumn   = { fg = "#3E3B36", bg = c.bg3 },

    NormalSB     = "Normal",
    SignColumnSB = "SignColumn",

    StatusLine   = { fg = c.base, bg = c.bg3 },
    StatusLineNC = { fg = c.base, bg = c.bg3 },
    WinSeparator = { fg = c.base, bg = c.bg0 },
    VertSplit    = "WinSeparator",
    TabLine      = { fg = c.base, bg = c.bg1 },
    TabLineSel   = { fg = c.base, bg = c.bg0 },
    TabLineFill  = { fg = c.base, bg = c.bg2 },
    WinBar       = "StatusLine",
    WinBarNC     = "StatusLineNC",

    NormalFloat = { fg = c.base, bg = c.bg0 },
    FloatBorder = { fg = c.base, bg = c.bg0 },
    FloatTitle  = { fg = c.base, bg = c.bg0 },

    Title      = { fg = c.lig3, bold = true },
    Directory  = { fg = c.lig3, bold = true },

    Visual     = { bg = c.bg2 },
    VisualNOS  = { bg = c.bg2 },

    Question   = { fg = c.base },
    ModeMsg    = { fg = c.base },
    MoreMsg    = { fg = c.base },
    MsgArea    = { fg = c.base, bg = c.bg0 },
    ErrorMsg   = { fg = c.lig3 },
    WarningMsg = { fg = c.lig3 },

    Search     = { fg = c.bg0, bg = c.dar2 },
    IncSearch  = { fg = c.bg0, bg = c.lig3 },
    CurSearch  = "IncSearch",
    Substitute = "IncSearch",

    WildMenu   = { fg = c.base,  bg = c.bg1 },
    Pmenu      = { fg = c.base,  bg = c.bg1 },
    PmenuSel   = { fg = c.bg1,  bg = c.base },
    PmenuSbar  = { bg = c.bg2 },
    PmenuThumb = { bg = c.base },

    MatchParen   = { fg = c.bg0, bg = c.gra1, bold = true },
    QuickFixLine = { fg = c.bg0, bg = c.base },

    NonText     = { fg = c.gra1 },
    Whitespace  = { fg = c.gra1 },
    EndOfBuffer = { fg = c.gra1 },

    String    = { fg = c.gre0 },
    Character = { fg = c.gre1 },

    Label        = { fg = c.dar2 },
    Keyword      = { fg = c.dar2 },
    Conditional  = { fg = c.dar2 },
    Exception    = { fg = c.dar2 },
    Repeat       = { fg = c.dar2 },
    Type         = { fg = c.dar1 },
    Typedef      = { fg = c.dar1 },
    Punctuation  = { fg = c.dar0 },
    Delimiter    = { fg = c.dar0 },
    Property     = { fg = c.base },
    Namespace    = { fg = c.base },
    Field        = { fg = c.base },
    Tag          = { fg = c.base },
    Identifier   = { fg = c.base },
    Variable     = { fg = c.base },
    StorageClass = { fg = c.lig0 },
    Structure    = { fg = c.lig0 },
    Function     = { fg = c.lig1 },
    Operator     = { fg = c.lig2 },
    Constant     = { fg = c.lig3 },
    Boolean      = { fg = c.lig4 },
    Number       = { fg = c.lig4 },
    Float        = { fg = c.lig4 },
    Literal      = { fg = c.lig4 },

    Statement = { fg = c.lig3 },
    Macro     = { fg = c.lig3 },
    PreCondit = { fg = c.lig3 },
    PreProc   = { fg = c.lig4 },
    Include   = { fg = c.lig4 },

    Debug           = { fg = c.lig2, bold = true },
    DebugBreakpoint = "Debug",
    DebugPc         = "Debug",

    Special        = { fg = c.dar2 },
    SpecialKey     = { fg = c.gra1 },
    SpecialChar    = { fg = c.gre1 },
    SpecialComment = { fg = c.lig1 },

    SpellBad   = { sp = c.err, undercurl = true },
    SpellCap   = { sp = c.hin, undercurl = true },
    SpellRare  = { sp = c.war, undercurl = true },
    SpellLocal = { sp = c.oka, undercurl = true },

    LspReferenceText            = { fg = c.base },
    LspReferenceRead            = { fg = c.lig1 },
    LspReferenceWrite           = { fg = c.lig1 },
    LspSignatureActiveParameter = { fg = c.lig3 },
    LspCodeLens                 = { fg = c.dar1 },
    LspInlayHint                = { fg = c.dar1 },
    LspInfoBorder               = "FloatBorder",

    DiagnosticError                  = { fg = c.err, bg = c.bg1 },
    DiagnosticWarn                   = { fg = c.war, bg = c.bg1 },
    DiagnosticOk                     = { fg = c.oka, bg = c.bg1 },
    DiagnosticHint                   = { fg = c.hin, bg = c.bg1 },
    DiagnosticInfo                   = { fg = c.hin, bg = c.bg1 },
    DiagnosticUnnecessary            = "DiagnosticUnderlineUnnecessary",
    DiagnosticVirtualTextError       = { fg = c.err },
    DiagnosticVirtualTextWarn        = { fg = c.war },
    DiagnosticVirtualTextOk          = { fg = c.oka },
    DiagnosticVirtualTextInfo        = { fg = c.hin },
    DiagnosticVirtualTextHint        = { fg = c.hin },
    DiagnosticVirtualTextUnnecessary = { fg = c.hin },
    DiagnosticUnderlineError         = { sp = c.err, undercurl = true },
    DiagnosticUnderlineWarn          = { sp = c.war, undercurl = true },
    DiagnosticUnderlineOk            = { sp = c.oka, undercurl = true },
    DiagnosticUnderlineInfo          = { sp = c.hin, undercurl = true },
    DiagnosticUnderlineHint          = { sp = c.hin, undercurl = true },
    DiagnosticUnderlineUnnecessary   = { sp = c.hin, undercurl = true },

    DiffAdd    = { fg = c.add },
    DiffChange = { fg = c.mod },
    DiffText   = { fg = c.mod },
    DiffDelete = { fg = c.rem },

    -- diff (not needed anymore?)
    diffAdded     = { fg = c.add },
    diffRemoved   = { fg = c.rem },
    diffChanged   = { fg = c.mod },
    diffOldFile   = { fg = c.rem },
    diffNewFile   = { fg = c.add },
    diffFile      = { fg = c.mod },
    diffLine      = { fg = c.base },
    diffIndexLine = { fg = c.lig4 },

    healthError   = { fg = c.bg0, bg = c.err },
    healthWarning = { fg = c.bg0, bg = c.war },
    healthSuccess = { fg = c.bg0, bg = c.oka },

    Error = { fg = c.bg0, bg = c.err },
  }
end

return M
